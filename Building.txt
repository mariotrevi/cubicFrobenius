The program is written in C and uses the following libraries: POSIX threads, primesieve (Kim Walisch), GMP (Gnu multi-presision) and the math library.
On a Linux system, I use the following command for compilation:

gcc -O3 -o primetest PseudoprimeAnalysis265a.c -lpthread -lprimesieve -lgmp -lm

This creates the executable primetest, which takes arguments on the command line:

Usage: ./primetest START BLOCK_SIZE NUM_BLOCKS 
To start at 0 and have updates every block of 1 million numbers, with 1 block in total, enter:

./primetest 0 1000000 1

The output is arranged by test result type, with 5 bits combining for a decimal representation of 0 to 31, where 0 signifies
failing all 5 conditions and 31 signifies passing all 5 conditions.

This is a sample report:

Processing block 1: 0 to 1000000
Type 0: 188126
Type 1: 5       \\ 5 numbers got test results of 00001
Type 2: 11      \\ 11 numbers got test results of 00010
Type 3: 0
Type 4: 0
Type 5: 0
Type 6: 0
Type 7: 0
Type 8: 2
Type 9: 0
Type 10: 0
Type 11: 0
Type 12: 0
Type 13: 0
Type 14: 0
Type 15: 0
Type 16: 6
Type 17: 0
Type 18: 0
Type 19: 0
Type 20: 0
Type 21: 0
Type 22: 0
Type 23: 0
Type 24: 0
Type 25: 0
Type 26: 0
Type 27: 0
Type 28: 0
Type 29: 0
Type 30: 0
Type 31: 78495        \\ 78495 numbers got test results of 11111
Type 31 primes: 78495  \\ counts how many numbers with test result 11111 are prime (all)
primesieve cumulative prime count excluding 2, 3, 5: 78495       \\ all the primes are getting results of 11111